-- local cmp_autopairs = require("nvim-autopairs.completion.cmp")
-- 
-- local has_words_before = function()
-- 	unpack = unpack or table.unpack
-- 	local line, col = unpack(vim.api.nvim_win_get_cursor(0))
-- 	return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end
-- 
-- local luasnip = require("luasnip")
-- local cmp = require("cmp")
-- local lspkind = require("lspkind")
-- -- local _, tailwindcss_colorizer_cmp = pcall(require, "tailwindcss-colorizer-cmp")
-- local blackOrWhiteFg = function(r, g, b)
-- 	return ((r * 0.299 + g * 0.587 + b * 0.114) > 186) and "#000000" or "#ffffff"
-- end
-- 
-- local icons = {
-- 	Text = "",
-- 	Method = "",
-- 	Function = "",
-- 	Constructor = "",
-- 	Field = "ﰠ",
-- 	Variable = "",
-- 	Class = "ﴯ",
-- 	Interface = "",
-- 	Module = "",
-- 	Property = "ﰠ",
-- 	Unit = "塞",
-- 	Value = "",
-- 	Enum = "",
-- 	Keyword = "",
-- 	Snippet = "",
-- 	Color = "",
-- 	File = "",
-- 	Reference = "",
-- 	Folder = "",
-- 	EnumMember = "",
-- 	Constant = "",
-- 	Struct = "פּ",
-- 	Event = "",
-- 	Operator = "",
-- 	TypeParameter = "",
-- }
-- 
-- cmp.setup({
-- 	enabled = function()
-- 		-- disable completion in comments
-- 		local context = require("cmp.config.context")
-- 		-- keep command mode completion enabled when cursor is in a comment
-- 		if vim.api.nvim_get_mode().mode == "c" then
-- 			return true
-- 		else
-- 			return not context.in_treesitter_capture("comment") and not context.in_syntax_group("Comment")
-- 		end
-- 	end,
-- 	snippet = {
-- 		expand = function(args)
-- 			require("luasnip").lsp_expand(args.body) -- For `luasnip` users.
-- 		end,
-- 	},
-- 	formatting = {
-- 		format = lspkind.cmp_format({
-- 			mode = "symbol_text",
-- 			-- preset = 'codicons',
-- 			maxwidth = 80,
-- 			menu = { -- showing type in menu
-- 				nvim_lsp = "[LSP]",
-- 				path = "[Path]",
-- 				buffer = "[Buffer]",
-- 				luasnip = "[LuaSnip]",
-- 			},
-- 			before = function(entry, vim_item)
-- 				if vim_item.kind == "Color" and entry.completion_item.documentation then
-- 					local _, _, r, g, b = string.find(entry.completion_item.documentation, "^rgb%((%d+), (%d+), (%d+)")
-- 					if r then
-- 						local color = string.format("%02x", r) .. string.format("%02x", g) .. string.format("%02x", b)
-- 						-- local group = 'Tw_' .. color
-- 						local group = "Tw_" .. color
-- 						if vim.fn.hlID(group) < 1 then
-- 							vim.api.nvim_set_hl(0, group, { fg = "#" .. color })
-- 							-- vim.api.nvim_set_hl(0, group, {fg = blackOrWhiteFg(r, g, b), bg = '#' .. color})
-- 						end
-- 						vim_item.kind = "⬤ Color"
-- 						vim_item.kind_hl_group = group
-- 						-- vim_item.abbr_hl_group = group
-- 						return vim_item
-- 					end
-- 				end
-- 				vim_item.kind = icons[vim_item.kind] and (icons[vim_item.kind] .. " " .. vim_item.kind) or vim_item.kind
-- 				-- vim_item.kind = icons[vim_item.kind] and icons[vim_item.kind] or vim_item.kind
-- 				return vim_item
-- 			end,
-- 		}),
-- 		fields = { "kind", "abbr", "menu" },
-- 	},
-- 	window = {
-- 		completion = {
-- 			-- border = 'rounded',
-- 			winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
-- 			col_offset = -3,
-- 			-- side_padding = 0,
-- 		},
-- 		documentation = {
-- 			border = "rounded",
-- 			winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
-- 		},
-- 	},
-- 	mapping = cmp.mapping.preset.insert({
-- 		["<C-b>"] = cmp.mapping(cmp.mapping.scroll_docs(-4)),
-- 		["<C-f>"] = cmp.mapping(cmp.mapping.scroll_docs(4)),
-- 		["<C-Space>"] = cmp.mapping(cmp.mapping.complete()),
-- 		["<C-e>"] = cmp.mapping.abort(),
-- 		["<C-n>"] = {
-- 			c = function(fallback)
-- 				if cmp.visible() then
-- 					cmp.select_next_item()
-- 				else
-- 					fallback()
-- 				end
-- 			end,
-- 		},
-- 		["<C-p>"] = {
-- 			c = function(fallback)
-- 				if cmp.visible() then
-- 					cmp.select_prev_item()
-- 				else
-- 					fallback()
-- 				end
-- 			end,
-- 		},
-- 		["<CR>"] = cmp.mapping.confirm({ select = true }),
-- 		["<Tab>"] = cmp.mapping(function(fallback)
-- 			if cmp.visible() then
-- 				local entry = cmp.get_selected_entry()
-- 				if entry then
-- 					cmp.confirm()
-- 				end
-- 				cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
-- 			elseif luasnip.expand_or_locally_jumpable() then
-- 				luasnip.expand_or_jump()
-- 			elseif has_words_before() then
-- 				cmp.complete()
-- 			else
-- 				fallback()
-- 			end
-- 		end, { "i", "s" }),
-- 		["<S-Tab>"] = cmp.mapping(function(fallback)
-- 			if cmp.visible() then
-- 				cmp.select_prev_item()
-- 			elseif luasnip.jumpable(-1) then
-- 				luasnip.jump(-1)
-- 			else
-- 				fallback()
-- 			end
-- 		end, { "i", "s" }),
-- 	}),
-- 	sources = cmp.config.sources({
-- 		{ name = "nvim_lsp", priority = 10 },
-- 		{ name = "nvim_lua", priority = 5 },
-- 		{ name = "luasnip", priority = 4 },
-- 		{ name = "buffer" },
-- 		{ name = "path" },
-- 		{ name = "rg" },
-- 	}),
-- 	experimental = { ghost_text = true },
-- })
-- 
-- -- Set configuration for specific filetype.
-- -- Only enable `fonts` for `conf` and `config` file types
-- require("cmp").setup.filetype({ "conf", "config" }, {
-- 	sources = {
-- 		{ name = "fonts", option = { space_filter = "-" } },
-- 	},
-- })
-- 
-- cmp.setup.filetype("gitcommit", {
-- 	sources = cmp.config.sources({
-- 		{ name = "cmp_git" }, -- You can specify the `cmp_git` source if you were installed it.
-- 		{ name = "buffer" },
-- 	}),
-- })
-- 
-- -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
-- cmp.setup.cmdline(":", {
-- 	mapping = cmp.mapping.preset.cmdline(),
-- 	sources = cmp.config.sources({
-- 		{ name = "path" },
-- 		{ name = "cmdline" },
-- 	}),
-- })
-- 
-- cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
